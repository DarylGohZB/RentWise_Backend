version: '3.8'

services:
  rentwiseDB:
    image: mysql:8.0
    container_name: rentwise-mysql
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    command: --port=3306
    ports:
      # Expose MySQL on host while container always listens on 3306
      - "${DB_PORT:-3307}:3306"
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/schema:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  nodejs:
    build:
      context: ./nodejs
      dockerfile: Dockerfile
    image: rentwise-node:latest
    container_name: rentwisesg-nodejs
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      NODE_ENV: ${NODE_ENV}
      # Force in-network DB settings; app connects to service name on 3306
      DB_HOST: rentwiseDB
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}

      # âœ… Gmail SMTP (current setup)
      GMAIL_USER: ${GMAIL_USER}
      GMAIL_PASS: ${GMAIL_PASS}

      # Redis connection string
      REDIS_URL: ${REDIS_URL}

      # JWT configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_TTL: ${JWT_TTL}

      # App port (fallback to 3000 in app.js if not provided)
      PORT: ${PORT:-3000}
      
    ports:
      - "${NODEJS_PORT:-3000}:${PORT:-3000}"
    depends_on:
      rentwiseDB:
        condition: service_healthy
    volumes:
      - ./nodejs:/usr/src/app
      - /usr/src/app/node_modules

  redis:
    image: redis:7.0-alpine
    container_name: rentwise-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  redis_data:
    driver: local
